diff --git a/source/wnnm.cpp b/source/wnnm.cpp
index e41fb3b..0d16f33 100644
--- a/source/wnnm.cpp
+++ b/source/wnnm.cpp
@@ -54,7 +54,7 @@ struct Workspace {
     float * svd_u; // shape: (min(square(block_size), group_size), svd_ldu)
     float * svd_vt; // shape: (min(square(block_size), group_size), svd_ldvt)
     float * svd_work; // shape: (svd_lwork,)
-    int * svd_iwork; // shape: (8 * min(square(block_size), group_size),)
+    MKL_INT * svd_iwork; // shape: (8 * min(square(block_size), group_size),)
     std::vector<std::tuple<float, int, int, int>> * errors; // shape: dynamic
     std::vector<std::tuple<float, int, int>> * center_errors; // shape: dynamic
     std::vector<std::tuple<int, int>> * search_locations; // shape: dynamic
@@ -102,7 +102,7 @@ struct Workspace {
 
         svd_work = vs_aligned_malloc<float>(svd_lwork * sizeof(float), 64);
 
-        svd_iwork = vs_aligned_malloc<int>(8 * std::min(m, n) * sizeof(int), 64);
+        svd_iwork = vs_aligned_malloc<MKL_INT>(8 * std::min(m, n) * sizeof(MKL_INT), 64);
 
         errors = new std::remove_pointer_t<decltype(errors)>;
         center_errors = new std::remove_pointer_t<decltype(center_errors)>;
@@ -817,22 +817,22 @@ static inline int block_matching(
 
 template<bool residual>
 static inline WnnmInfo patch_estimation(
-    float * VS_RESTRICT denoising_patch, int svd_lda,
+    float * VS_RESTRICT denoising_patch, MKL_INT svd_lda,
     float & adaptive_weight,
     float sigma,
     int block_size, int active_group_size,
     const float * VS_RESTRICT mean_patch,
     bool adaptive_aggregation,
     float * VS_RESTRICT svd_s,
-    float * VS_RESTRICT svd_u, int svd_ldu,
-    float * VS_RESTRICT svd_vt, int svd_ldvt,
-    float * VS_RESTRICT svd_work, int svd_lwork, int * VS_RESTRICT svd_iwork
+    float * VS_RESTRICT svd_u, MKL_INT svd_ldu,
+    float * VS_RESTRICT svd_vt, MKL_INT svd_ldvt,
+    float * VS_RESTRICT svd_work, MKL_INT svd_lwork, MKL_INT * VS_RESTRICT svd_iwork
 ) noexcept {
 
-    int m = square(block_size);
-    int n = active_group_size;
+    MKL_INT m = square(block_size);
+    MKL_INT n = active_group_size;
 
-    int svd_info;
+    MKL_INT svd_info;
     sgesdd(
         "S", &m, &n,
         denoising_patch, &svd_lda,
@@ -849,7 +849,7 @@ static inline WnnmInfo patch_estimation(
     // WNNP with parameter epsilon ignored
     const float constant = 8.f * sqrtf(2.0f * n) * square(sigma);
 
-    int k = 1;
+    MKL_INT k = 1;
     if constexpr (residual) {
         k = 0;
     }
